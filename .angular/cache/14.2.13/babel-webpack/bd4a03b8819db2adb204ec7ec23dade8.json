{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { JwtService } from './jwt.service';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./jwt.service\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, jwtService) {\n      this.http = http;\n      this.jwtService = jwtService;\n    }\n\n    formatErrors(error) {\n      return throwError(error.error);\n    }\n\n    get(path, params = new HttpParams()) {\n      return this.http.get(`${environment.api_url}${path}`, {\n        params\n      }).pipe(catchError(this.formatErrors));\n    }\n\n    put(path, body = {}) {\n      return this.http.put(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.formatErrors));\n    }\n\n    post(path, body = {}) {\n      return this.http.post(`${environment.api_url}${path}`, JSON.stringify(body)).pipe(catchError(this.formatErrors));\n    }\n\n    delete(path) {\n      return this.http.delete(`${environment.api_url}${path}`).pipe(catchError(this.formatErrors));\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}