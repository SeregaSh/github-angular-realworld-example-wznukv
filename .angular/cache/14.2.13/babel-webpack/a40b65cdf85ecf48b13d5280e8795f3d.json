{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, ReplaySubject } from 'rxjs';\nimport { ApiService } from './api.service';\nimport { JwtService } from './jwt.service';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./jwt.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(apiService, http, jwtService) {\n      this.apiService = apiService;\n      this.http = http;\n      this.jwtService = jwtService;\n      this.currentUserSubject = new BehaviorSubject({});\n      this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n      this.isAuthenticatedSubject = new ReplaySubject(1);\n      this.isAuthenticated = this.isAuthenticatedSubject.asObservable();\n    } // Verify JWT in localstorage with server & load user's info.\n    // This runs once on application startup.\n\n\n    populate() {\n      // If JWT detected, attempt to get & store user's info\n      if (this.jwtService.getToken()) {\n        this.apiService.get('/user').subscribe(data => this.setAuth(data.user), err => this.purgeAuth());\n      } else {\n        // Remove any potential remnants of previous auth states\n        this.purgeAuth();\n      }\n    }\n\n    setAuth(user) {\n      // Save JWT sent from server in localstorage\n      this.jwtService.saveToken(user.token); // Set current user data into observable\n\n      this.currentUserSubject.next(user); // Set isAuthenticated to true\n\n      this.isAuthenticatedSubject.next(true);\n    }\n\n    purgeAuth() {\n      // Remove JWT from localstorage\n      this.jwtService.destroyToken(); // Set current user to an empty object\n\n      this.currentUserSubject.next({}); // Set auth status to false\n\n      this.isAuthenticatedSubject.next(false);\n    }\n\n    attemptAuth(type, credentials) {\n      const route = type === 'login' ? '/login' : '';\n      return this.apiService.post('/users' + route, {\n        user: credentials\n      }).pipe(map(data => {\n        this.setAuth(data.user);\n        return data;\n      }));\n    }\n\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    } // Update the user on the server (email, pass, etc)\n\n\n    update(user) {\n      return this.apiService.put('/user', {\n        user\n      }).pipe(map(data => {\n        // Update the currentUser observable\n        this.currentUserSubject.next(data.user);\n        return data.user;\n      }));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.JwtService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}