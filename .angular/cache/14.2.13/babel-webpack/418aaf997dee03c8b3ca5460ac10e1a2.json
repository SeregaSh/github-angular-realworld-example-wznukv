{"ast":null,"code":"import { UntypedFormBuilder, UntypedFormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { UserService } from '../core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../core\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../shared/list-errors.component\";\n\nconst _c0 = function () {\n  return [\"/login\"];\n};\n\nfunction AuthComponent_a_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 14);\n    i0.ɵɵtext(1, \"Have an account?\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\n\nconst _c1 = function () {\n  return [\"/register\"];\n};\n\nfunction AuthComponent_a_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 14);\n    i0.ɵɵtext(1, \"Need an account?\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c1));\n  }\n}\n\nfunction AuthComponent_input_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 15);\n  }\n}\n\nexport let AuthComponent = /*#__PURE__*/(() => {\n  class AuthComponent {\n    constructor(route, router, userService, fb) {\n      this.route = route;\n      this.router = router;\n      this.userService = userService;\n      this.fb = fb;\n      this.authType = '';\n      this.title = '';\n      this.errors = {\n        errors: {}\n      };\n      this.isSubmitting = false; // use FormBuilder to create a form group\n\n      this.authForm = this.fb.group({\n        'email': ['', Validators.required],\n        'password': ['', Validators.required]\n      });\n    }\n\n    ngOnInit() {\n      this.route.url.subscribe(data => {\n        // Get the last piece of the URL (it's either 'login' or 'register')\n        this.authType = data[data.length - 1].path; // Set a title for the page accordingly\n\n        this.title = this.authType === 'login' ? 'Sign in' : 'Sign up'; // add form control for username if this is the register page\n\n        if (this.authType === 'register') {\n          this.authForm.addControl('username', new UntypedFormControl());\n        }\n      });\n    }\n\n    submitForm() {\n      this.isSubmitting = true;\n      this.errors = {\n        errors: {}\n      };\n      const credentials = this.authForm.value;\n      this.userService.attemptAuth(this.authType, credentials).subscribe(data => this.router.navigateByUrl('/'), err => {\n        this.errors = err;\n        this.isSubmitting = false;\n      });\n    }\n\n  }\n\n  AuthComponent.ɵfac = function AuthComponent_Factory(t) {\n    return new (t || AuthComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder));\n  };\n\n  AuthComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthComponent,\n    selectors: [[\"app-auth-page\"]],\n    decls: 20,\n    vars: 9,\n    consts: [[1, \"auth-page\"], [1, \"container\", \"page\"], [1, \"row\"], [1, \"col-md-6\", \"offset-md-3\", \"col-xs-12\"], [1, \"text-xs-center\"], [3, \"routerLink\", 4, \"ngIf\"], [3, \"errors\"], [3, \"formGroup\", \"ngSubmit\"], [3, \"disabled\"], [1, \"form-group\"], [\"formControlName\", \"username\", \"placeholder\", \"Username\", \"class\", \"form-control form-control-lg\", \"type\", \"text\", 4, \"ngIf\"], [\"formControlName\", \"email\", \"placeholder\", \"Email\", \"type\", \"text\", 1, \"form-control\", \"form-control-lg\"], [\"formControlName\", \"password\", \"placeholder\", \"Password\", \"type\", \"password\", 1, \"form-control\", \"form-control-lg\"], [\"type\", \"submit\", 1, \"btn\", \"btn-lg\", \"btn-primary\", \"pull-xs-right\", 3, \"disabled\"], [3, \"routerLink\"], [\"formControlName\", \"username\", \"placeholder\", \"Username\", \"type\", \"text\", 1, \"form-control\", \"form-control-lg\"]],\n    template: function AuthComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p\", 4);\n        i0.ɵɵtemplate(7, AuthComponent_a_7_Template, 2, 2, \"a\", 5);\n        i0.ɵɵtemplate(8, AuthComponent_a_8_Template, 2, 2, \"a\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"app-list-errors\", 6);\n        i0.ɵɵelementStart(10, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function AuthComponent_Template_form_ngSubmit_10_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵelementStart(11, \"fieldset\", 8)(12, \"fieldset\", 9);\n        i0.ɵɵtemplate(13, AuthComponent_input_13_Template, 1, 0, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"fieldset\", 9);\n        i0.ɵɵelement(15, \"input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"fieldset\", 9);\n        i0.ɵɵelement(17, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 13);\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.authType == \"register\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.authType == \"login\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"errors\", ctx.errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.authForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.isSubmitting);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.authType == \"register\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", !ctx.authForm.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.title, \" \");\n      }\n    },\n    dependencies: [i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i5.ListErrorsComponent, i1.RouterLinkWithHref],\n    encapsulation: 2\n  });\n  return AuthComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}