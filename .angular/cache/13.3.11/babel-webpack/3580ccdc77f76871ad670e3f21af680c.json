{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { ApiService } from './api.service';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nexport let ArticlesService = /*#__PURE__*/(() => {\n  class ArticlesService {\n    constructor(apiService) {\n      this.apiService = apiService;\n    }\n\n    query(config) {\n      // Convert any filters over to Angular's URLSearchParams\n      const params = {};\n      Object.keys(config.filters).forEach(key => {\n        params[key] = config.filters[key];\n      });\n      return this.apiService.get('/articles' + (config.type === 'feed' ? '/feed' : ''), new HttpParams({\n        fromObject: params\n      }));\n    }\n\n    get(slug) {\n      return this.apiService.get('/articles/' + slug).pipe(map(data => data.article));\n    }\n\n    destroy(slug) {\n      return this.apiService.delete('/articles/' + slug);\n    }\n\n    save(article) {\n      // If we're updating an existing article\n      if (article.slug) {\n        return this.apiService.put('/articles/' + article.slug, {\n          article: article\n        }).pipe(map(data => data.article)); // Otherwise, create a new article\n      } else {\n        return this.apiService.post('/articles/', {\n          article: article\n        }).pipe(map(data => data.article));\n      }\n    }\n\n    favorite(slug) {\n      return this.apiService.post('/articles/' + slug + '/favorite');\n    }\n\n    unfavorite(slug) {\n      return this.apiService.delete('/articles/' + slug + '/favorite');\n    }\n\n  }\n\n  ArticlesService.ɵfac = function ArticlesService_Factory(t) {\n    return new (t || ArticlesService)(i0.ɵɵinject(i1.ApiService));\n  };\n\n  ArticlesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArticlesService,\n    factory: ArticlesService.ɵfac\n  });\n  return ArticlesService;\n})();","map":null,"metadata":{},"sourceType":"module"}